'USE STRICT'

CONST FS = REQUIRE('FS')
CONST PATH = REQUIRE('PATH')
// 
// CONST FILE = FS.READFILESYNC(__FILENAME)
// CONSOLE.LOG(FILE)
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// CONST FILE1 = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// CONSOLE.LOG(FILE1)
// 
// THE FS.WRITEFILESYNC FUNCTION TAKES A PATH AND A STRING OR BUFFER AND BLOCKS THE PROCESS UNTIL THE FILE HAS BEEN COMPLETELY WRITTEN:
CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE())

// AN OPTIONS OBJECT CAN BE ADDED, WITH A FLAG OPTION SET TO 'A' TO OPEN A FILE IN APPEND MODE:
// MEANS THAT OUT1.TXT WILL BE OVERWITE.
// CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING: 'UTF8' })
// FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE(), {
// 	FLAG: 'A'
// })


'USE STRICT'

CONST FS = REQUIRE('FS')
CONST PATH = REQUIRE('PATH')
// 
// CONST FILE = FS.READFILESYNC(__FILENAME)
// CONSOLE.LOG(FILE)
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// CONST FILE1 = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// CONSOLE.LOG(FILE1)
// 
// THE FS.WRITEFILESYNC FUNCTION TAKES A PATH AND A STRING OR BUFFER AND BLOCKS THE PROCESS UNTIL THE FILE HAS BEEN COMPLETELY WRITTEN:
// CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE())

// AN OPTIONS OBJECT CAN BE ADDED, WITH A FLAG OPTION SET TO 'A' TO OPEN A FILE IN APPEND MODE:
// MEANS THAT OUT1.TXT WILL BE OVERWITE.
CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING: 'UTF8' })
FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE(), {
	FLAG: 'A'
})


'USE STRICT'

CONST FS = REQUIRE('FS')
CONST PATH = REQUIRE('PATH')
// 
// CONST FILE = FS.READFILESYNC(__FILENAME)
// CONSOLE.LOG(FILE)
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// CONST FILE1 = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// CONSOLE.LOG(FILE1)
// 
// THE FS.WRITEFILESYNC FUNCTION TAKES A PATH AND A STRING OR BUFFER AND BLOCKS THE PROCESS UNTIL THE FILE HAS BEEN COMPLETELY WRITTEN:
// CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE())

// AN OPTIONS OBJECT CAN BE ADDED, WITH A FLAG OPTION SET TO 'A' TO OPEN A FILE IN APPEND MODE:
// MEANS THAT OUT1.TXT WILL BE OVERWITE.
CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING: 'UTF8' })
FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE(), {
	FLAG: 'A'
})

// IF THERE'S A PROBLEM WITH AN OPERATION THE *SYNC APIS WILL THROW. SO TO PERFORM ERROR HANDLING THEY NEED TO BE WRAPPED IN A TRY/CATCH:

// CHANGE THE PERMISSION TO BLOCK ANY WRITING (READING..?) OPERTATION ON THIS 'OUT1.TXT' FILE
// NODE -E "FS.CHMODSYNC('OUT1.TXT', 0O666)"

'USE STRICT'

CONST FS = REQUIRE('FS')
CONST PATH = REQUIRE('PATH')
// 
// CONST FILE = FS.READFILESYNC(__FILENAME)
// CONSOLE.LOG(FILE)
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// 
// // THE ABOVE CODE WILL SYNCHRONOUSLY READ ITS OWN CONTENTS INTO A BUFFER AND THEN PRINT THE BUFFER:
// CONST FILE1 = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// CONSOLE.LOG(FILE1)
// 
// THE FS.WRITEFILESYNC FUNCTION TAKES A PATH AND A STRING OR BUFFER AND BLOCKS THE PROCESS UNTIL THE FILE HAS BEEN COMPLETELY WRITTEN:
// CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING:'UTF8' })
// FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE())

// AN OPTIONS OBJECT CAN BE ADDED, WITH A FLAG OPTION SET TO 'A' TO OPEN A FILE IN APPEND MODE:
// MEANS THAT OUT1.TXT WILL BE OVERWITE.
CONST CONTENTS = FS.READFILESYNC(__FILENAME, { ENCODING: 'UTF8' })
FS.WRITEFILESYNC(PATH.JOIN(__DIRNAME, 'OUT1.TXT'), CONTENTS.TOUPPERCASE(), {
	FLAG: 'A'
})

// IF THERE'S A PROBLEM WITH AN OPERATION THE *SYNC APIS WILL THROW. SO TO PERFORM ERROR HANDLING THEY NEED TO BE WRAPPED IN A TRY/CATCH:

// CHANGE THE PERMISSION TO BLOCK ANY WRITING (READING..?) OPERTATION ON THIS 'OUT1.TXT' FILE
// NODE -E "FS.CHMODSYNC('OUT1.TXT', 0O666)"

